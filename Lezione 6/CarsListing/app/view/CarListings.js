/*
 * File: app/view/CarListings.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarsListings.view.CarListings', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.carlistings',

    requires: [
        'CarsListings.view.CarListingsViewModel',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.form.field.Number',
        'Ext.grid.plugin.RowEditing',
        'Ext.XTemplate',
        'Ext.chart.CartesianChart',
        'Ext.chart.axis.Category',
        'Ext.chart.axis.Numeric'
    ],

    viewModel: {
        type: 'carlistings'
    },
    border: '',
    style: 'background-color: green;',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch',
        padding: '15%;'
    },
    items: [
        {
            xtype: 'gridpanel',
            flex: 1,
            width: '100%',
            title: 'My Grid Panel',
            bind: {
                store: '{carData}'
            },
            viewConfig: {
                modelValidation: true,
                width: '100%',
                bind: {
                    viewModel: {
                        bindTo: 'carlistings',
                        deep: true
                    }
                }
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'manufacturer',
                    text: 'Manufacturer',
                    editor: {
                        xtype: 'textfield'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'model',
                    text: 'Model',
                    editor: {
                        xtype: 'textfield',
                        modelValidation: true
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'price',
                    text: 'Price',
                    editor: {
                        xtype: 'numberfield'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'wiki',
                    text: 'Wiki'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'img',
                    text: 'Img'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'quality',
                    text: 'Quality'
                }
            ],
            listeners: {
                select: 'onGridpanelSelect',
                beforerender: 'onGridpanelBeforeRender'
            },
            plugins: [
                {
                    ptype: 'rowediting',
                    listeners: {
                        validateedit: 'onRowEditingValidateedit',
                        edit: 'onRowEditingEdit'
                    }
                }
            ]
        },
        {
            xtype: 'panel',
            flex: 1,
            margins: '5 0 0 0',
            height: 141,
            itemId: 'detailPanel',
            tpl: [
                '<img src="data/{img}" style="float: right;" />',
                'manufacturer: {manufacturer}',
                'model: <a href="{wiki}" target="_blank" >{model}</a><br />',
                'price: {price:usMoney}'
            ],
            title: 'Detail',
            bind: {
                viewModel: {
                    bindTo: 'rec',
                    deep: true
                }
            }
        },
        {
            xtype: 'panel',
            flex: 1,
            itemId: 'chartPanel',
            layout: 'fit',
            title: 'Quality',
            items: [
                {
                    xtype: 'cartesian',
                    height: 250,
                    itemId: 'qualityChart',
                    width: 400,
                    insetPadding: 20,
                    store: 'CarChartStore',
                    axes: [
                        {
                            type: 'category',
                            fields: [
                                'name'
                            ],
                            title: 'Quality',
                            position: 'bottom'
                        },
                        {
                            type: 'numeric',
                            fields: [
                                'rating'
                            ],
                            majorTickSteps: 4,
                            maximum: 5,
                            minimum: 0,
                            title: 'Score',
                            position: 'bottom'
                        }
                    ]
                }
            ]
        }
    ],

    onGridpanelSelect: function(rowmodel, record, index, eOpts) {
        var detailPanel = this.child('#detailPanel');
        detailPanel.update(record.data);
        debugger;
        var chart = this.down('#qualityChart');
        var qualityData = record.get('quality');
        chart.store.loadData(qualityData);
        detailPanel.show();
        var chartPanel = this.child('#chartPanel');
        chartPanel.show();
    },

    onGridpanelBeforeRender: function(component, eOpts) {
        var detailPanel = this.child('#detailPanel');
                debugger;
                        detailPanel.hide();
                        var chartPanel = this.child('#chartPanel');
                        chartPanel.hide();
    },

    onRowEditingValidateedit: function(editor, context, eOpts) {
        debugger;
    },

    onRowEditingEdit: function(editor, context, eOpts) {
        debugger;
    }

});